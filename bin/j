#!/usr/bin/env node

// Magic project opener: `cd` to a folder using fuzzy search. Looks at `~/\_/`, work projects, and several iCloud Drive folders.
// > Note: the first letter of the query should match, the rest is fuzzy-matched.
//
// - Navigate to a project directory:
//
// `j {{partial_name}}`
//
// # Optional environmental variables
//
// - `WORK_PROJECTS_DIR="~/unicorn"`: specify an additional folder to look in.
//
// ---
// NOTE: Should be used via Bash alias like this:
// function j { cd "$("$HOME/dotfiles/bin/j" $1)"; }
//
// Author: Artem Sapegin, sapegin.me
// License: MIT
// https://github.com/sapegin/dotfiles

// TODO: Move to bin/lib, give it a better name
import path from 'node:path';
import fs from 'node:fs';
import os from 'node:os';
import { parseEnv } from 'node:util';

const untildify = (x) => x.replace(/^~/, os.homedir());

const envFile = untildify(`~/.env`);
const env = fs.existsSync(envFile)
	? parseEnv(fs.readFileSync(envFile, 'utf8'))
	: {};

const PERSONAL_PROJECTS_DIR = untildify(`~/_`);
const WORK_PROJECTS_DIR = untildify(env.WORK_PROJECTS_DIR);
const EXTRA_PROJECTS = [os.homedir(), ['dotfiles']];
const CLOUD_PROJECTS = [
	{
		label: 'Apple iCloud Docs',
		dir: untildify(`~/Library/Mobile Documents/com~apple~CloudDocs`),
	},
	{
		label: 'Cloud Writings',
		dir: untildify(`~/Library/Mobile Documents/com~apple~CloudDocs/Writings`),
	},
];

const getDirs = (d) =>
	fs.readdirSync(d).filter((f) => fs.statSync(path.join(d, f)).isDirectory());

const tryRepo = (dir, query, dirs) => {
	const repo = find(dirs ?? getDirs(dir), query);

	if (repo) {
		console.log(path.join(dir, repo));
		process.exit(0);
	}
};

const tryCloud = (projects, query) => {
	// Fuzzy search, don't require the first letter to match
	const nameRegexp = new RegExp(`${fuzzyfy(query)}`, 'i');

	for (const { label, dir } of projects) {
		if (nameRegexp.test(label)) {
			console.log(dir);
			process.exit(0);
		}
	}
};

function fuzzyfy(name) {
	return name
		.replace(/[^a-z0-9]/gi, '')
		.split('')
		.join('.*');
}

// TODO: Don't require fist letter to match but give such repos larger weight
function find(repos, name) {
	// Fuzzy search but require the first letter to match
	const nameRegexp = new RegExp(`^${fuzzyfy(name)}`, 'i');
	repos = repos.filter((r) => nameRegexp.test(r));

	// Order by repo name length, shortest names first
	repos.sort((a, b) => (a.length > b.length ? 1 : -1));

	// Return the most probable result
	return repos?.[0];
}

const args = process.argv.splice(2);
if (args.length !== 1) {
	console.log('Usage: j <name>');
	process.exit(1);
}

const query = args[0];

// Cloud projects
tryCloud(CLOUD_PROJECTS, query);

// Personal projects
tryRepo(PERSONAL_PROJECTS_DIR, query);

// Work projects
if (WORK_PROJECTS_DIR) {
	tryRepo(WORK_PROJECTS_DIR, query);
}

// Extra projects
tryRepo(EXTRA_PROJECTS[0], query, EXTRA_PROJECTS[1]);

console.log('Repository not found');
