#!/usr/bin/env bash

# Changes Git branch and pulls remote changes.
#
# - Switch to or create a branch:
#
# `br {{branch}}`
#
# - Switch to a previous branch:
#
# `br -`
#
# - Delete a local fully merged branch:
#
# `br -d {{branch}}`
#
# - Delete a local not fully merged branch:
#
# `br -D {{branch}}`
#
# ---
#
# Based on git-friendly:
# https://github.com/git-friendly/git-friendly
#
# Author: Artem Sapegin, sapegin.me
# License: MIT
# https://github.com/sapegin/dotfiles

# Common stuff
RED="$(tput setaf 1)"
UNDERLINE="$(tput sgr 0 1)"
NOCOLOR="$(tput sgr0)"
function error() { echo -e "$UNDERLINE$RED$1$NOCOLOR"; }

# Check whether a local branch exists
function has_local_branch() {
	local name="$1"
	if git show-ref --quiet "refs/heads/$name"; then
		return 0
	else
		return 1
	fi
}

# Check whether a remote branch exists
function has_remote_branch() {
	local name="$1"
	if git ls-remote --exit-code --heads "$remote" "$name" &> /dev/null; then
		return 0
	else
		return 1
	fi
}

# Pull if has remote
function try_pull() {
	if has_remote_branch "$branch"; then
		echo "Pull"
		pull
	fi
}

# Attempt to use master branch in repository where main is used
if [ "$branch" == "master" ]; then
	if has_local_branch "main"; then
		git switch main
		echo "This repository uses main branch, not master"
		try_pull
		exit 0
	fi
fi

# Attempt to use main branch in repository where master is used
if [ "$branch" == "main" ]; then
	if has_local_branch "master"; then
		git switch master
		echo "This repository uses master branch, not main"
		try_pull
		exit 0
	fi
fi

remote="origin"
branch="$1"
delete=
if [ "$1" == "-d" ] || [ "$1" == "-D" ]; then
	delete="$1"
	branch="$2"
fi

# Switch to the previous branch
if [ "$branch" == "-" ]; then
	git switch -
	branch=$(git rev-parse --abbrev-ref HEAD)
	try_pull
	exit 0
fi

# Delete branch
if [ "$delete" ]; then
	echo "üíÄ Removing local branch $branch""‚Ä¶"
	git branch $delete "$branch"
	exit 0
fi

if has_local_branch "$branch"; then
	# Local branch already exists, switching
	echo "üëì Switching to existing local branch $branch""‚Ä¶"
	git switch "$branch"
	if has_remote_branch "$branch"; then
		# Fix tracking if needed
		tracking=$(git branch -vv | grep "*" | awk '{ print $4 }')
		if [[ ! "$tracking" =~ "$remote" ]]; then
			echo "‚öôÔ∏è Your local branch is not tracking the corresponding remote branch, fixing‚Ä¶"
			git branch --set-upstream-to "$branch" "$remote/$branch"
		fi

		# Pull
		pull
	fi
else
	# No local branch
	if has_remote_branch "$branch"; then
		# Remote branch exists, fetching and switching
		echo "üõ∏ Fetching remote branch $branch""‚Ä¶"
		git fetch "$remote" "$branch"
		echo
		git switch -c "$branch" --track "$remote/$branch"
	else
		# No remote branch, creating a new branch
		echo "ü™¥ Creating new local branch $branch""‚Ä¶"
		git checkout -b "$branch"
	fi
fi
