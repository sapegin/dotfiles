#!/usr/bin/env node

// Removes all `node_modules` folders inside the home directory older than 30 days.
//
// - Remove old `node_modules` folders:
//
// `clean-node-modules`
//
// ---
// Author: Artem Sapegin, sapegin.me
// License: MIT
// https://github.com/sapegin/dotfiles

import path from 'node:path';
import { execSync } from 'node:child_process';
import fs from 'node:fs/promises';
import os from 'node:os';

const HOME = os.homedir();

const MAX_DAYS = 30;
const IGNORE = [
	`${HOME}/.config`,
	`${HOME}/.npm`,
	`${HOME}/.vscode`,
	`${HOME}/.cursor`,
	`${HOME}/dotfiles`,
	`${HOME}/Library`,
	`${HOME}/Documents/Library`,
	`${HOME}/Movies`,
];

const sizes = [];

function differenceInDays(timestamp1, timestamp2) {
	const msPerDay = 24 * 60 * 60 * 1000;
	return Math.floor(Math.abs(timestamp1 - timestamp2) / msPerDay);
}

function getFolderSize(folderPath) {
	return parseInt(
		execSync(`du -ksc "${folderPath}" | sort -h -r`)
			.toString()
			.split('\t')
			.shift()
	);
}

function getFolderAgeInDays(stats) {
	return differenceInDays(new Date().getTime(), stats.mtimeMs);
}

// TODO: Use pretty-bytes?
function formatSize(kilobytes) {
	const gigabytes = kilobytes / 1024 / 1024;
	if (gigabytes >= 1) {
		return `${gigabytes.toFixed(2)} GB`;
	}

	const megabytes = kilobytes / 1024;
	if (megabytes >= 1) {
		return `${megabytes.toFixed(2)} MB`;
	}

	return `${kilobytes} KB`;
}

function summ(items) {
	return items.reduce((total, item) => total + item, 0);
}

async function safeStat(filepath) {
	try {
		return await fs.stat(filepath);
	} catch (err) {
		if (err.code === 'ENOENT') {
			return {
				isDirectory: () => false,
			};
		}
		throw err;
	}
}

async function safeReaddir(folderPath) {
	try {
		return await fs.readdir(folderPath);
	} catch (err) {
		if (err.code === 'EPERM') {
			return [];
		}
		throw err;
	}
}

async function removeFolder(folderPath) {
	const size = getFolderSize(folderPath);
	sizes.push(size);

	console.log(`Removing ${folderPath} (${formatSize(size)})`);
	await fs.rm(folderPath, { recursive: true, force: true });
}

async function removeNodeModules(folderPath) {
	const stats = await safeStat(folderPath);
	if (!stats.isDirectory() || IGNORE.includes(folderPath)) {
		return;
	}

	const name = path.basename(folderPath);
	if (name === 'node_modules') {
		if (getFolderAgeInDays(stats) > MAX_DAYS) {
			removeFolder(folderPath);
		}
	} else {
		const folders = await safeReaddir(folderPath);
		await Promise.all(
			folders.map((folder) => removeNodeModules(path.join(folderPath, folder)))
		);
	}
}

async function main() {
	await removeNodeModules(HOME);

	const totalSize = summ(sizes);
	console.log();
	console.log(
		`Removed ${sizes.length} folders, total of ${formatSize(totalSize)} cleared`
	);
}

main();
