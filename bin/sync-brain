#!/usr/bin/env node

// Generates Dash docset with:
// > [ ] Washing code book
// > [ ] Blog
//
// ---
// Author: Artem Sapegin, sapegin.me
// License: MIT
// https://github.com/sapegin/dotfiles

/*
// Index each file by its page title
const name = $("title").text();
const type = document.querySelector('meta[name="type"]').getAttribute('content');
dashDoc.addEntry({ name, type });
dashDoc.addEntry({ name, type });

// Indexing each section
const shouldIndexSubsections = document.querySelector('meta[name="subsections"]').getAttribute('content');
if (shouldIndexSubsections === 'yes') {
    document.querySelectorAll('h2').forEach(function(heading) {
        const title = heading.textContent;
        const hash = title.replace(/\W/g, '');
        heading.setAttribute('id', hash);
        dashDoc.addEntry({name: title, type: 'Section', hash});
    });
}
*/

import path from 'node:path';
import os from 'node:os';
import fs from 'node:fs';
import { execSync } from 'node:child_process';
import { globSync } from 'glob';
import remarkParse from 'remark-parse';
import remarkRehype from 'remark-rehype';
import rehypeStringify from 'rehype-stringify';
import rehypeShiki from '@shikijs/rehype';
import { unified } from 'unified';

// TODO: Add Squirrelsong themes
// TODO: Remove IDs: {#no-loops}
// TODO: What `subsection` does?!
// TODO: How to add an icon? Raccoon!
// TODO: TEMPLATE!!!

// TODO: Copy image
// TODO: Fix links
// TODO: Fix images

const HOME = os.homedir();

const BOOK_REPO_TAR_GZ =
	'https://codeload.github.com/sapegin/washingcode-book/tar.gz/master';

const BOOK_SOURCE_DIR = `${HOME}/dotfiles/washingcode-book-master`;
const DEST_DIR = `${HOME}/dotfiles/brain`;

function read(file) {
	return fs.readFileSync(file, 'utf8');
}

function write(file, text) {
	return fs.writeFileSync(file, text);
}

function getTitle(text) {
	return text.match(/#\s+([^\n]+)/m)?.[1] ?? '';
}

function wrapHtml(body, { title, type, subsections }) {
	return `<!DOCTYPE html>
  <html lang="en">
    <head>
      <title>${title}</title>
      <meta charset="utf-8">
      <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
      <meta name="type" content="${type}">
      <meta name="subsections" content="${subsections ? 'yes' : 'no'}">
      <link rel="stylesheet" href="../styles/styles.css">
    </head>
    <body>
      ${body}
    </body>
  </html>
  `;
}

async function markdownToHtml(md, { type, subsections }) {
	const html = await unified()
		.use(remarkParse)
		.use(remarkRehype)
		.use(rehypeShiki, {
			themes: {
				light: 'vitesse-light',
				dark: 'vitesse-dark',
			},
		})
		.use(rehypeStringify)
		.process(md);

	return wrapHtml(html, {
		title: getTitle(md),
		type,
		subsections,
	});
}

async function addMarkdownFolder(
	dir,
	{ destDir, type, subsections = false, filter = () => true }
) {
	const files = globSync(`${dir}/**/*.md`);
	fs.mkdirSync(`${DEST_DIR}/${destDir}`, { recursive: true, force: true });

	for (const file of files) {
		if (filter(file) === false) {
			continue;
		}

		console.log('👉🏼', file);
		const md = read(file);
		const html = await markdownToHtml(md, { type, subsections });
		const filename = path.parse(file).name;
		write(`${DEST_DIR}/${destDir}/${filename}.html`, html);
	}
}

console.log('📖 Downloading the book…');

fs.rmSync(BOOK_SOURCE_DIR, { recursive: true, force: true });
execSync(`curl "${BOOK_REPO_TAR_GZ}" | tar xz -C $HOME/dotfiles`);

console.log();
console.log('📖 Generating the book files…');

await addMarkdownFolder(`${BOOK_SOURCE_DIR}/manuscript`, {
	destDir: 'book',
	type: 'Book',
	subsections: true,
	filter: (x) =>
		x.includes('Header') === false && x.includes('Footer') === false,
});

console.log();
console.log('🦜 Now update the docset in Dash');
